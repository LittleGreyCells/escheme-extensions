(generic-functions-show)
(define-function sam (x y z) (+ x y z))
(generic-functions-show)
(define-function gil (x) x)
(generic-functions-show)
(define-class larry <object> (x kate chris ben))
(class-show larry)
(generic-functions-show)
(define-class <integer> <object> ((x <object> integer?)))
(class-show <integer>)
(define f1 (make foo))
(define f3 (make <integer> (x 0)))
(get-x f1)
(set-x f1 10)
(get-x f1)
(get-x f3)
(object-class f1)
(object-bindings f1)
(object-bindings f3)
(set-x f3 20)
(get-x f3)
(object-bindings f3)
(set-x f3 (quote a))
(next-function)
(mary f1)
(mary 1)
(next-function)
(define b1 (make bar))
(mary b1)
(next-function)
(define fn1 (function (a) a))
(define fn2 (function ((f1 foo)) (get-x f1)))
(define fn3 (function ((f3 bill)) (get-x f3)))
(fn1 1)
(fn2 f1)
(define w1 (make bill (x 100)))
(fn3 w1)
(generic-functions-show)
(add-function mary fn3)
(mary w1)
(define-class <integer> <object> ((value <object> integer?)))
(define-class <real> <object> ((value <object> real?)))
(define-generic-function add (x y))
(define-function add ((x <integer>) (y <integer>)) (make <integer> (value (+ (get-value x) (get-value y)))))
(define-function add ((x <real>) (y <real>)) (make <real> (value (+ (get-value x) (get-value y)))))
(define x1 (make <integer> (value 10)))
(define x2 (make <integer> (value 20)))
(define y1 (make <real> (value 10.000000)))
(define y2 (make <real> (value 20.000000)))
(define x3 (add x1 x2))
(define y3 (add y1 y2))
(define z3 (add x1 y2))
(define z4 (add y2 x1))
(define-function add ((x <integer>) (y <real>)) (make <real> (value (+ (get-value x) (get-value y)))))
(define-function add ((x <real>) (y <integer>)) (make <real> (value (+ (get-value x) (get-value y)))))
(define z3 (add x1 y2))
(define z4 (add y2 x1))
(print (list (get-value x1) (get-value y2) (get-value z3)))
(print (list (get-value y2) (get-value x1) (get-value z4)))
(generic-functions-show)
(define suites (quote (spade heart diamond club)))
(define denoms (quote (a 2 3 4 5 6 7 8 9 10 j q k)))
(define-class <card> <object> ((suite <object>) (denom <object>)))
(define-function show ((card <card>)) (display "card{ ") (display (get-denom card)) (display ", ") (display (get-suite card)) (display " }") (newline))
(define c1 (make <card> (suite (quote spade)) (denom (quote a))))
(define c2 (make <card> (suite (quote heart)) (denom (quote k))))
(define c3 (make <card> (suite (quote club)) (denom (quote 9))))
(show c1)
(show c2)
(show c3)
(define-function red? ((card <card>)) (member (get-suite card) (quote (heart diamond))))
(define-function black? ((card <card>)) (member (get-suite card) (quote (spade club))))
(red? c1)
(red? c2)
(black? c1)
(black? c2)
(define-class <deck> <object> ((cards <object>)))
(define-function make-deck () (let (cards) (let ((ss suites)) (while ss (let ((dd denoms)) (while dd (set! cards (cons (make <card> (suite (car ss)) (denom (car dd))) cards)) (set! dd (cdr dd)))) (set! ss (cdr ss)))) (make <deck> (cards cards))))
(define d1 (make-deck))
(define-function show ((deck <deck>)) (let ((cards (list->vector (get-cards deck))) (i 0)) (while (< i (vector-length cards)) (show (vector-ref cards i)) (set! i (+ i 1)))))
(show d1)
(define-function add ((deck <deck>) (card <card>)) (set-cards deck (cons card (get-cards deck))) card)
(define-function shuffle ((deck <deck>)) (let ((cards (list->vector (get-cards deck)))) (let ((i (- (vector-length cards) 1))) (while (> i 0) (let ((j (random i))) (let ((c1 (vector-ref cards i)) (c2 (vector-ref cards j))) (vector-set! cards j c1) (vector-set! cards i c2))) (set! i (- i 1)))) (set-cards deck (vector->list cards)) deck))
(show d1)
(show (shuffle d1))
(define-function peek-top ((deck <deck>)) (car (get-cards deck)))
(define-function get-top ((deck <deck>)) (let ((top (peek-top deck))) (set-cards deck (cdr (get-cards deck))) top))
(show (peek-top d1))
(show (get-top d1))
(show (peek-top d1))
(show (get-top d1))
(show (peek-top d1))
(define d2 (make <deck>))
(show d2)
(add d2 c1)
(add d2 c2)
(add d2 c3)
(show (shuffle d2))
(generic-functions-show)
(exit)
